{"mappings":"C,A,W,S,E,C,C,C,C,C,C,C,E,O,c,C,E,E,C,I,E,I,E,W,C,E,a,C,C,E,C,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,I,E,E,Q,C,E,Q,S,C,C,C,ECAA,IAAA,EAAA,EAAA,S,E,E,S,E,E,SAQM,EAAN,WAAM,SAAA,EAkBQ,CAAkB,EAlB1B,AAAA,CAAA,EAAA,EAAA,CAAA,AAAA,EAAA,IAAA,CAAA,GAoBF,IAAI,CAAC,SAAS,CAAG,CACf,GAAI,KACJ,KAAM,OACN,KAAM,OACN,MAAO,OACT,EAEA,IAAI,CAAC,UAAU,CAAG,CAChB,KAAM,OACN,QAAS,UACT,IAAK,MACL,KAAM,MACR,EAEA,IAAI,CAAC,YAAY,CAAG,CAClB,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACb,CAED,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,OAAO,CAAG,EACf,IAAI,CAAC,SAAS,CAAG,EACjB,IAAI,CAAC,mBAAmB,CAAG,CAAA,EAC3B,IAAI,CAAC,MAAM,CAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAClC,IAAI,CAAC,eAAe,CAAG,CAAC,CAAC,EACzB,IAAI,CAAC,YAAY,CAAG,GAAsB,IAAI,CAAC,YAAY,A,CA/CzD,MAAA,AAAA,CAAA,EAAA,EAAA,CAAA,AAAA,EAAA,EAAA,C,CAkDJ,IAAA,WAAA,MAAA,WACE,IAAI,CAAC,MAAM,CAAG,IAAI,CAAC,UAAU,CAAC,OAAO,CACrC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAC5C,C,E,CAEA,IAAA,YAAA,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","sources":["<anon>","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js","node_modules/@swc/helpers/esm/_to_consumable_array.js","node_modules/@swc/helpers/esm/_array_without_holes.js","node_modules/@swc/helpers/esm/_array_like_to_array.js","node_modules/@swc/helpers/esm/_iterable_to_array.js","node_modules/@swc/helpers/esm/_non_iterable_spread.js","node_modules/@swc/helpers/esm/_unsupported_iterable_to_array.js","src/scripts/main.js"],"sourcesContent":["(function () {\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global =\n        typeof globalThis !== 'undefined'\n          ? globalThis\n          : typeof self !== 'undefined'\n          ? self\n          : typeof window !== 'undefined'\n          ? window\n          : typeof global !== 'undefined'\n          ? global\n          : {};\n  \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire7b01\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire7b01\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"5fy9m\", function(module, exports) {\n/* eslint-disable indent */ \nvar $bB0zn = parcelRequire(\"bB0zn\");\n\nvar $6QEWP = parcelRequire(\"6QEWP\");\n\nvar $2Xzd1 = parcelRequire(\"2Xzd1\");\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ var $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game(initialCustomState) {\n        (0, $bB0zn._)(this, Game);\n        // declare constants\n        this.direction = {\n            up: \"up\",\n            down: \"down\",\n            left: \"left\",\n            right: \"right\"\n        };\n        this.gameStatus = {\n            idle: \"idle\",\n            playing: \"playing\",\n            win: \"win\",\n            lose: \"lose\"\n        };\n        this.initialField = [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.score = 0;\n        this.cellMax = 0;\n        this.fieldSize = 4;\n        this.isAvailableMovement = true;\n        this.status = this.gameStatus.idle;\n        this.isCustomInitial = !!initialCustomState;\n        this.defaultState = initialCustomState || this.initialField;\n    }\n    (0, $6QEWP._)(Game, [\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                this.status = this.gameStatus.playing;\n                this.sumGameFieldByRow(this.direction.left);\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                this.status = this.gameStatus.playing;\n                this.sumGameFieldByRow(this.direction.right);\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                this.status = this.gameStatus.playing;\n                this.sumGameFieldByColumn(this.direction.up);\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                this.status = this.gameStatus.playing;\n                this.sumGameFieldByColumn(this.direction.down);\n            }\n        },\n        {\n            /**\n   * @returns {number}\n   */ key: \"getScore\",\n            value: function getScore() {\n                return this.score;\n            }\n        },\n        {\n            /**\n   * @returns {number[][]}\n   */ key: \"getState\",\n            value: function getState() {\n                return this.state;\n            }\n        },\n        {\n            /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ key: \"getStatus\",\n            value: function getStatus() {\n                return this.status;\n            }\n        },\n        {\n            /**\n   * Starts the game.\n   */ key: \"start\",\n            value: function start() {\n                this.state = this.isCustomInitial && this.initialCustomState.length === this.fieldSize ? this.initialCustomState : this.initialField;\n                this.status = this.gameStatus.playing;\n                this.generateRandomCellOnField(2);\n            }\n        },\n        {\n            /**\n   * Resets the game.\n   */ key: \"restart\",\n            value: function restart() {\n                if (this.isCustomInitial) this.state = this.defaultState;\n                else {\n                    this.state = this.initialField;\n                    this.generateRandomCellOnField(2);\n                }\n                this.score = 0;\n                this.status = this.gameStatus.idle;\n            }\n        },\n        {\n            /**\n   * Get cell's max value.\n   */ key: \"gMaxCell\",\n            value: function gMaxCell() {\n                return this.cellMax;\n            }\n        },\n        {\n            /**\n   * Get if cells can move.\n   */ key: \"getMoveAvailability\",\n            value: function getMoveAvailability() {\n                return this.isAvailableMovement;\n            }\n        },\n        {\n            // helpers\n            key: \"getMaxValueCell\",\n            value: function getMaxValueCell(gameField) {\n                var _Math;\n                return (_Math = Math).max.apply(_Math, (0, $2Xzd1._)(gameField.flat()));\n            }\n        },\n        {\n            key: \"getRandomCellValue\",\n            value: function getRandomCellValue() {\n                return Math.random() < 0.9 ? 2 : 4;\n            }\n        },\n        {\n            key: \"getRandomCellIndex\",\n            value: function getRandomCellIndex() {\n                var gameFieldSize = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.fieldSize;\n                var row = Math.floor(Math.random() * gameFieldSize);\n                var col = Math.floor(Math.random() * gameFieldSize);\n                return {\n                    row: row,\n                    col: col\n                };\n            }\n        },\n        {\n            key: \"sumRow\",\n            value: function sumRow(row) {\n                var size = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.fieldSize, rtl = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;\n                // right to left (rtl or TRUE) represent summ cell with RIGHT or DOWN click\n                // left to right (ltr or FALSE) represent summ cell with LEFT or UP click\n                var isSumm = false;\n                var sum = 0;\n                if (rtl) {\n                    var rightToLeftSum = row.reduceRight(function(newRow, value, i) {\n                        if (!value) return newRow;\n                        var firstValue = newRow[0];\n                        if (value === firstValue && !isSumm) {\n                            isSumm = true;\n                            sum = firstValue * 2;\n                            return [\n                                firstValue * 2\n                            ].concat((0, $2Xzd1._)(newRow.slice(1)));\n                        }\n                        return [\n                            value\n                        ].concat((0, $2Xzd1._)(newRow));\n                    }, []);\n                    var rowWithCollapsedRtl = rightToLeftSum.length === 4 ? rightToLeftSum : (0, $2Xzd1._)(new Array(size - rightToLeftSum.length).fill(0)).concat((0, $2Xzd1._)(rightToLeftSum));\n                    return {\n                        row: rowWithCollapsedRtl,\n                        summCollapsed: sum\n                    };\n                }\n                var leftToRightSum = row.reduce(function(newRow, value, i) {\n                    if (!value) return newRow;\n                    if (i === 0) {\n                        newRow.push(value);\n                        return newRow;\n                    }\n                    if (value === newRow[newRow.length - 1] && !isSumm) {\n                        isSumm = true;\n                        sum = newRow.slice(-1) * 2;\n                        return (0, $2Xzd1._)(newRow.slice(0, -1)).concat([\n                            newRow.slice(-1) * 2\n                        ]);\n                    }\n                    return (0, $2Xzd1._)(newRow).concat([\n                        value\n                    ]);\n                }, []);\n                var rowWithCollapsedLtr = leftToRightSum.length === 4 ? leftToRightSum : (0, $2Xzd1._)(leftToRightSum).concat((0, $2Xzd1._)(new Array(size - leftToRightSum.length).fill(0)));\n                return {\n                    row: rowWithCollapsedLtr,\n                    summCollapsed: sum\n                };\n            }\n        },\n        {\n            key: \"transposeField\",\n            value: function transposeField(field) {\n                var transposedField = field.reduce(function(newArr, row) {\n                    row.forEach(function(item, itemIdx) {\n                        newArr[itemIdx] = (0, $2Xzd1._)(newArr[itemIdx] || []).concat([\n                            item\n                        ]);\n                    });\n                    return newArr;\n                }, []);\n                return transposedField;\n            }\n        },\n        {\n            key: \"compareGameField\",\n            value: function compareGameField(array1, array2) {\n                var array1Json = JSON.stringify(array1);\n                var array2Json = JSON.stringify(array2);\n                return array1Json === array2Json;\n            }\n        },\n        {\n            key: \"getAvailabilityMovement\",\n            value: function getAvailabilityMovement(field) {\n                var _this = this;\n                var sumOfCollapsedCells = 0;\n                // check for free cells\n                var hasFreeCell = field.flat().includes(0);\n                if (hasFreeCell) return true;\n                // check availablityt for left or right movement\n                field.forEach(function(row) {\n                    var _this_sumRow = _this.sumRow(row, _this.fieldSize, _this.direction.left), leftCollapsed = _this_sumRow.summCollapsed;\n                    var _this_sumRow1 = _this.sumRow(row, _this.fieldSize, _this.direction.right), rightCollapsed = _this_sumRow1.summCollapsed;\n                    sumOfCollapsedCells += leftCollapsed + rightCollapsed;\n                });\n                // check availablity for up or down movement\n                var tr = this.transposeField(field);\n                tr.forEach(function(row) {\n                    var _this_sumRow = _this.sumRow(row, _this.fieldSize, _this.direction.up), upCollapsed = _this_sumRow.summCollapsed;\n                    var _this_sumRow1 = _this.sumRow(row, _this.fieldSize, _this.direction.down), downCollapsed = _this_sumRow1.summCollapsed;\n                    sumOfCollapsedCells += upCollapsed + downCollapsed;\n                });\n                return sumOfCollapsedCells > 0;\n            }\n        },\n        {\n            // game logic methods\n            key: \"sumGameFieldByRow\",\n            value: function sumGameFieldByRow(direction) {\n                var _this = this;\n                var gameField = this.state;\n                var size = this.fieldSize;\n                var scoreByField = this.score || 0;\n                var calculatedGameField = gameField.map(function(row) {\n                    var _this_sumRow = _this.sumRow(row, size, // eslint-disable-next-line no-unneeded-ternary\n                    direction === _this.direction.right ? true : false), rowCollaped = _this_sumRow.row, summCollapsed = _this_sumRow.summCollapsed;\n                    scoreByField += summCollapsed;\n                    return rowCollaped;\n                });\n                var isGameFieldChanged = !this.compareGameField(gameField, calculatedGameField);\n                if (!isGameFieldChanged) return;\n                this.score = scoreByField;\n                this.state = calculatedGameField;\n                this.cellMax = this.getMaxValueCell(calculatedGameField);\n                this.generateRandomCellOnField();\n            }\n        },\n        {\n            key: \"sumGameFieldByColumn\",\n            value: function sumGameFieldByColumn(direction) {\n                var _this = this;\n                var gameField = this.state;\n                var size = this.fieldSize;\n                var scoreByField = this.score || 0;\n                var calculatedGameField = this.transposeField(gameField).map(function(row) {\n                    var _this_sumRow = _this.sumRow(row, size, // eslint-disable-next-line no-unneeded-ternary\n                    direction === _this.direction.down ? true : false), rowCollaped = _this_sumRow.row, summCollapsed = _this_sumRow.summCollapsed;\n                    scoreByField += summCollapsed;\n                    return rowCollaped;\n                });\n                var isGameFieldChanged = !this.compareGameField(gameField, calculatedGameField);\n                if (!isGameFieldChanged) return;\n                this.score = scoreByField;\n                this.state = this.transposeField(calculatedGameField);\n                this.cellMax = this.getMaxValueCell(calculatedGameField);\n                this.generateRandomCellOnField();\n            }\n        },\n        {\n            key: \"generateRandomCellOnField\",\n            value: function generateRandomCellOnField() {\n                var qty = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1;\n                var gameField = JSON.parse(JSON.stringify(this.state));\n                for(var i = 0; i < qty; i++){\n                    var cell = this.getRandomCellIndex();\n                    var cellValue = this.getRandomCellValue();\n                    while(gameField[cell.row][cell.col])cell = this.getRandomCellIndex();\n                    gameField[cell.row][cell.col] = cellValue;\n                }\n                this.state = gameField;\n                this.isAvailableMovement = this.getAvailabilityMovement(gameField);\n            }\n        }\n    ]);\n    return Game;\n}();\nmodule.exports = $3d28d7f1aac198f5$var$Game;\n\n});\nparcelRegister(\"bB0zn\", function(module, exports) {\n\n$parcel$export(module.exports, \"_\", function () { return $8713978b2328d32b$export$2996f80ef42b8419; });\nfunction $8713978b2328d32b$export$2996f80ef42b8419(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n});\n\nparcelRegister(\"6QEWP\", function(module, exports) {\n\n$parcel$export(module.exports, \"_\", function () { return $4fc75ccb937ab1df$export$d60067ff2358eee8; });\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$d60067ff2358eee8(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n});\n\nparcelRegister(\"2Xzd1\", function(module, exports) {\n\n$parcel$export(module.exports, \"_\", function () { return $227c6742e0ff6f82$export$1b5e630bc3aea29f; });\n\nvar $gUOYc = parcelRequire(\"gUOYc\");\n\nvar $Q6yVl = parcelRequire(\"Q6yVl\");\n\nvar $4S8xA = parcelRequire(\"4S8xA\");\n\nvar $ihB7G = parcelRequire(\"ihB7G\");\nfunction $227c6742e0ff6f82$export$1b5e630bc3aea29f(arr) {\n    return (0, $gUOYc._array_without_holes)(arr) || (0, $Q6yVl._iterable_to_array)(arr) || (0, $ihB7G._unsupported_iterable_to_array)(arr) || (0, $4S8xA._non_iterable_spread)();\n}\n\n});\nparcelRegister(\"gUOYc\", function(module, exports) {\n\n$parcel$export(module.exports, \"_array_without_holes\", function () { return $c50969dc1df61e8b$export$7e0947b5ad3404e2; });\n\nvar $gNF1f = parcelRequire(\"gNF1f\");\nfunction $c50969dc1df61e8b$export$7e0947b5ad3404e2(arr) {\n    if (Array.isArray(arr)) return (0, $gNF1f._array_like_to_array)(arr);\n}\n\n});\nparcelRegister(\"gNF1f\", function(module, exports) {\n\n$parcel$export(module.exports, \"_array_like_to_array\", function () { return $c3b10a83b523f372$export$79e617b1955a2616; });\nfunction $c3b10a83b523f372$export$79e617b1955a2616(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\n\n});\n\n\nparcelRegister(\"Q6yVl\", function(module, exports) {\n\n$parcel$export(module.exports, \"_iterable_to_array\", function () { return $09c9f293d010c0e1$export$1eb58a6e75231000; });\nfunction $09c9f293d010c0e1$export$1eb58a6e75231000(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\n});\n\nparcelRegister(\"4S8xA\", function(module, exports) {\n\n$parcel$export(module.exports, \"_non_iterable_spread\", function () { return $38c2d4931cb7a7c4$export$e6f3c4780d19eb2b; });\nfunction $38c2d4931cb7a7c4$export$e6f3c4780d19eb2b() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n});\n\nparcelRegister(\"ihB7G\", function(module, exports) {\n\n$parcel$export(module.exports, \"_unsupported_iterable_to_array\", function () { return $d4f69c5c6c4654b1$export$a5be06335b3a083c; });\n\nvar $gNF1f = parcelRequire(\"gNF1f\");\nfunction $d4f69c5c6c4654b1$export$a5be06335b3a083c(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return (0, $gNF1f._array_like_to_array)(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0, $gNF1f._array_like_to_array)(o, minLen);\n}\n\n});\n\n\n\n\"use strict\";\n\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    var Game = (parcelRequire(\"5fy9m\"));\n    var game = new Game();\n    var startRestartButton = document.querySelector(\".button\");\n    var gStatus = function() {\n        return game.getStatus();\n    };\n    var gState = function() {\n        return game.getState();\n    };\n    var gScore = function() {\n        return game.getScore();\n    };\n    var gMaxCell = function() {\n        return game.gMaxCell();\n    };\n    var gIsAvailableMovement = function() {\n        return game.getMoveAvailability();\n    };\n    var messageStart = document.querySelector(\".message-start\");\n    var messageWin = document.querySelector(\".message-win\");\n    var messageLose = document.querySelector(\".message-lose\");\n    var gameScore = document.querySelector(\".game-score\");\n    // #region create game field cells array\n    var rows = document.querySelectorAll(\".field-row\");\n    var gameFieldCells = [];\n    rows.forEach(function(row) {\n        gameFieldCells.push(row.querySelectorAll(\".field-cell\"));\n    });\n    // #endregion\n    // #region clear game field\n    var resetGame = function() {\n        game.restart();\n        refreshGameField();\n        messageWin.classList.add(\"hidden\");\n        messageLose.classList.add(\"hidden\");\n    };\n    // #endregion\n    // #region change start/restart button text and class\n    var changeButtonStartToRestart = function() {\n        startRestartButton.classList.remove(\"start\");\n        startRestartButton.classList.add(\"restart\");\n        startRestartButton.textContent = \"Restart\";\n    };\n    var changeButtonRestartToStart = function() {\n        startRestartButton.classList.remove(\"restart\");\n        startRestartButton.classList.add(\"start\");\n        startRestartButton.textContent = \"Start\";\n    };\n    // #endregion\n    // #region refreshGameField\n    var refreshGameField = function() {\n        var field = gState();\n        var maxCell = gMaxCell();\n        var isAvailableMovement = gIsAvailableMovement();\n        gameScore.textContent = gScore();\n        for(var i = 0; i < gameFieldCells.length; i++){\n            var row = gameFieldCells[i];\n            for(var k = 0; k < row.length; k++){\n                var value = field[i][k];\n                var cell = row[k];\n                cell.textContent = \"\";\n                cell.className = \"field-cell\";\n                if (value) {\n                    cell.textContent = value;\n                    cell.className = \"field-cell field-cell--\".concat(value);\n                }\n            }\n        }\n        if (maxCell === 2048) {\n            document.removeEventListener(\"keydown\", kbListener);\n            messageWin.classList.remove(\"hidden\");\n        }\n        if (!isAvailableMovement) {\n            document.removeEventListener(\"keydown\", kbListener);\n            messageLose.classList.remove(\"hidden\");\n        }\n    };\n    // #endregion\n    // #region keyboardListener\n    var kbListener = function(e) {\n        if (gStatus() === \"playing\") changeButtonStartToRestart();\n        switch(e.key){\n            case \"ArrowLeft\":\n                game.moveLeft();\n                refreshGameField();\n                break;\n            case \"ArrowRight\":\n                game.moveRight();\n                refreshGameField();\n                break;\n            case \"ArrowUp\":\n                game.moveUp();\n                refreshGameField();\n                break;\n            case \"ArrowDown\":\n                game.moveDown();\n                refreshGameField();\n                break;\n            default:\n                break;\n        }\n    };\n    // #endregion\n    startRestartButton.addEventListener(\"click\", function(e) {\n        e.preventDefault();\n        var isResetButton = e.target.classList.contains(\"restart\");\n        var isStartButton = e.target.classList.contains(\"start\");\n        if (gStatus() === \"playing\" && isResetButton) {\n            resetGame();\n            changeButtonRestartToStart();\n            document.addEventListener(\"keydown\", kbListener);\n        }\n        if (gStatus() === \"playing\" && isStartButton) {\n            resetGame();\n            refreshGameField();\n        }\n        if (gStatus() === \"idle\" && isStartButton) {\n            game.start();\n            e.currentTarget.blur();\n            messageStart.classList.add(\"hidden\");\n            refreshGameField();\n            document.addEventListener(\"keydown\", kbListener);\n        }\n    });\n});\n\n})();\n//# sourceMappingURL=index.0c859cf3.js.map\n","/* eslint-disable indent */\n'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n\n  // Default game fiels is 4x4\n\n  constructor(initialCustomState) {\n    // declare constants\n    this.direction = {\n      up: 'up',\n      down: 'down',\n      left: 'left',\n      right: 'right',\n    };\n\n    this.gameStatus = {\n      idle: 'idle',\n      playing: 'playing',\n      win: 'win',\n      lose: 'lose',\n    };\n\n    this.initialField = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    this.score = 0;\n    this.cellMax = 0;\n    this.fieldSize = 4;\n    this.isAvailableMovement = true;\n    this.status = this.gameStatus.idle;\n    this.isCustomInitial = !!initialCustomState;\n    this.defaultState = initialCustomState || this.initialField;\n  }\n\n  moveLeft() {\n    this.status = this.gameStatus.playing;\n    this.sumGameFieldByRow(this.direction.left);\n  }\n\n  moveRight() {\n    this.status = this.gameStatus.playing;\n    this.sumGameFieldByRow(this.direction.right);\n  }\n\n  moveUp() {\n    this.status = this.gameStatus.playing;\n    this.sumGameFieldByColumn(this.direction.up);\n  }\n\n  moveDown() {\n    this.status = this.gameStatus.playing;\n    this.sumGameFieldByColumn(this.direction.down);\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.state;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.state =\n      this.isCustomInitial && this.initialCustomState.length === this.fieldSize\n        ? this.initialCustomState\n        : this.initialField;\n    this.status = this.gameStatus.playing;\n\n    this.generateRandomCellOnField(2);\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    if (this.isCustomInitial) {\n      this.state = this.defaultState;\n    } else {\n      this.state = this.initialField;\n      this.generateRandomCellOnField(2);\n    }\n\n    this.score = 0;\n    this.status = this.gameStatus.idle;\n  }\n\n  /**\n   * Get cell's max value.\n   */\n\n  gMaxCell() {\n    return this.cellMax;\n  }\n\n  /**\n   * Get if cells can move.\n   */\n\n  getMoveAvailability() {\n    return this.isAvailableMovement;\n  }\n\n  // helpers\n\n  getMaxValueCell(gameField) {\n    return Math.max(...gameField.flat());\n  }\n\n  getRandomCellValue() {\n    return Math.random() < 0.9 ? 2 : 4;\n  }\n\n  getRandomCellIndex(gameFieldSize = this.fieldSize) {\n    const row = Math.floor(Math.random() * gameFieldSize);\n    const col = Math.floor(Math.random() * gameFieldSize);\n\n    return { row, col };\n  }\n\n  sumRow(row, size = this.fieldSize, rtl = true) {\n    // right to left (rtl or TRUE) represent summ cell with RIGHT or DOWN click\n    // left to right (ltr or FALSE) represent summ cell with LEFT or UP click\n\n    let isSumm = false;\n    let sum = 0;\n\n    if (rtl) {\n      const rightToLeftSum = row.reduceRight((newRow, value, i) => {\n        if (!value) {\n          return newRow;\n        }\n\n        const firstValue = newRow[0];\n\n        if (value === firstValue && !isSumm) {\n          isSumm = true;\n          sum = firstValue * 2;\n\n          return [firstValue * 2, ...newRow.slice(1)];\n        }\n\n        return [value, ...newRow];\n      }, []);\n\n      const rowWithCollapsedRtl =\n        rightToLeftSum.length === 4\n          ? rightToLeftSum\n          : [\n              ...new Array(size - rightToLeftSum.length).fill(0),\n              ...rightToLeftSum,\n            ];\n\n      return {\n        row: rowWithCollapsedRtl,\n        summCollapsed: sum,\n      };\n    }\n\n    const leftToRightSum = row.reduce((newRow, value, i) => {\n      if (!value) {\n        return newRow;\n      }\n\n      if (i === 0) {\n        newRow.push(value);\n\n        return newRow;\n      }\n\n      if (value === newRow[newRow.length - 1] && !isSumm) {\n        isSumm = true;\n        sum = newRow.slice(-1) * 2;\n\n        return [...newRow.slice(0, -1), newRow.slice(-1) * 2];\n      }\n\n      return [...newRow, value];\n    }, []);\n\n    const rowWithCollapsedLtr =\n      leftToRightSum.length === 4\n        ? leftToRightSum\n        : [\n            ...leftToRightSum,\n            ...new Array(size - leftToRightSum.length).fill(0),\n          ];\n\n    return {\n      row: rowWithCollapsedLtr,\n      summCollapsed: sum,\n    };\n  }\n\n  transposeField(field) {\n    const transposedField = field.reduce((newArr, row) => {\n      row.forEach((item, itemIdx) => {\n        newArr[itemIdx] = [...(newArr[itemIdx] || []), item];\n      });\n\n      return newArr;\n    }, []);\n\n    return transposedField;\n  }\n\n  compareGameField(array1, array2) {\n    const array1Json = JSON.stringify(array1);\n    const array2Json = JSON.stringify(array2);\n\n    return array1Json === array2Json;\n  }\n\n  getAvailabilityMovement(field) {\n    let sumOfCollapsedCells = 0;\n\n    // check for free cells\n\n    const hasFreeCell = field.flat().includes(0);\n\n    if (hasFreeCell) {\n      return true;\n    }\n\n    // check availablityt for left or right movement\n    field.forEach((row) => {\n      const { summCollapsed: leftCollapsed } = this.sumRow(\n        row,\n        this.fieldSize,\n        this.direction.left,\n      );\n      const { summCollapsed: rightCollapsed } = this.sumRow(\n        row,\n        this.fieldSize,\n        this.direction.right,\n      );\n\n      sumOfCollapsedCells += leftCollapsed + rightCollapsed;\n    });\n\n    // check availablity for up or down movement\n\n    const tr = this.transposeField(field);\n\n    tr.forEach((row) => {\n      const { summCollapsed: upCollapsed } = this.sumRow(\n        row,\n        this.fieldSize,\n        this.direction.up,\n      );\n      const { summCollapsed: downCollapsed } = this.sumRow(\n        row,\n        this.fieldSize,\n        this.direction.down,\n      );\n\n      sumOfCollapsedCells += upCollapsed + downCollapsed;\n    });\n\n    return sumOfCollapsedCells > 0;\n  }\n\n  // game logic methods\n\n  sumGameFieldByRow(direction) {\n    const gameField = this.state;\n    const size = this.fieldSize;\n    let scoreByField = this.score || 0;\n\n    const calculatedGameField = gameField.map((row) => {\n      const { row: rowCollaped, summCollapsed } = this.sumRow(\n        row,\n        size,\n        // eslint-disable-next-line no-unneeded-ternary\n        direction === this.direction.right ? true : false,\n      );\n\n      scoreByField += summCollapsed;\n\n      return rowCollaped;\n    });\n\n    const isGameFieldChanged = !this.compareGameField(\n      gameField,\n      calculatedGameField,\n    );\n\n    if (!isGameFieldChanged) {\n      return;\n    }\n\n    this.score = scoreByField;\n    this.state = calculatedGameField;\n    this.cellMax = this.getMaxValueCell(calculatedGameField);\n    this.generateRandomCellOnField();\n  }\n\n  sumGameFieldByColumn(direction) {\n    const gameField = this.state;\n    const size = this.fieldSize;\n    let scoreByField = this.score || 0;\n\n    const calculatedGameField = this.transposeField(gameField).map((row) => {\n      const { row: rowCollaped, summCollapsed } = this.sumRow(\n        row,\n        size,\n        // eslint-disable-next-line no-unneeded-ternary\n        direction === this.direction.down ? true : false,\n      );\n\n      scoreByField += summCollapsed;\n\n      return rowCollaped;\n    });\n\n    const isGameFieldChanged = !this.compareGameField(\n      gameField,\n      calculatedGameField,\n    );\n\n    if (!isGameFieldChanged) {\n      return;\n    }\n\n    this.score = scoreByField;\n    this.state = this.transposeField(calculatedGameField);\n    this.cellMax = this.getMaxValueCell(calculatedGameField);\n    this.generateRandomCellOnField();\n  }\n\n  generateRandomCellOnField(qty = 1) {\n    const gameField = JSON.parse(JSON.stringify(this.state));\n\n    for (let i = 0; i < qty; i++) {\n      let cell = this.getRandomCellIndex();\n      const cellValue = this.getRandomCellValue();\n\n      while (gameField[cell.row][cell.col]) {\n        cell = this.getRandomCellIndex();\n      }\n\n      gameField[cell.row][cell.col] = cellValue;\n    }\n    this.state = gameField;\n\n    this.isAvailableMovement = this.getAvailabilityMovement(gameField);\n  }\n}\n\nmodule.exports = Game;\n","export function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nexport function _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","import { _array_without_holes } from \"./_array_without_holes.js\";\nimport { _iterable_to_array } from \"./_iterable_to_array.js\";\nimport { _non_iterable_spread } from \"./_non_iterable_spread.js\";\nimport { _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nexport function _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nexport { _to_consumable_array as _ };\n","import { _array_like_to_array } from \"./_array_like_to_array.js\";\n\nexport function _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nexport { _array_without_holes as _ };\n","export function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n}\nexport { _array_like_to_array as _ };\n","export function _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) {\n        return Array.from(iter);\n    }\n}\nexport { _iterable_to_array as _ };\n","export function _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_spread as _ };\n","import { _array_like_to_array } from \"./_array_like_to_array.js\";\n\nexport function _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nexport { _unsupported_iterable_to_array as _ };\n","'use strict';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const Game = require('../modules/Game.class');\n  const game = new Game();\n  const startRestartButton = document.querySelector('.button');\n  const gStatus = () => game.getStatus();\n  const gState = () => game.getState();\n  const gScore = () => game.getScore();\n  const gMaxCell = () => game.gMaxCell();\n  const gIsAvailableMovement = () => game.getMoveAvailability();\n  const messageStart = document.querySelector('.message-start');\n  const messageWin = document.querySelector('.message-win');\n  const messageLose = document.querySelector('.message-lose');\n  const gameScore = document.querySelector('.game-score');\n\n  // #region create game field cells array\n  const rows = document.querySelectorAll('.field-row');\n  const gameFieldCells = [];\n\n  rows.forEach((row) => {\n    gameFieldCells.push(row.querySelectorAll('.field-cell'));\n  });\n  // #endregion\n\n  // #region clear game field\n  const resetGame = () => {\n    game.restart();\n    refreshGameField();\n    messageWin.classList.add('hidden');\n    messageLose.classList.add('hidden');\n  };\n  // #endregion\n\n  // #region change start/restart button text and class\n  const changeButtonStartToRestart = () => {\n    startRestartButton.classList.remove('start');\n    startRestartButton.classList.add('restart');\n    startRestartButton.textContent = 'Restart';\n  };\n\n  const changeButtonRestartToStart = () => {\n    startRestartButton.classList.remove('restart');\n    startRestartButton.classList.add('start');\n    startRestartButton.textContent = 'Start';\n  };\n\n  // #endregion\n\n  // #region refreshGameField\n\n  const refreshGameField = () => {\n    const field = gState();\n    const maxCell = gMaxCell();\n    const isAvailableMovement = gIsAvailableMovement();\n\n    gameScore.textContent = gScore();\n\n    for (let i = 0; i < gameFieldCells.length; i++) {\n      const row = gameFieldCells[i];\n\n      for (let k = 0; k < row.length; k++) {\n        const value = field[i][k];\n        const cell = row[k];\n\n        cell.textContent = '';\n        cell.className = 'field-cell';\n\n        if (value) {\n          cell.textContent = value;\n          cell.className = `field-cell field-cell--${value}`;\n        }\n      }\n    }\n\n    if (maxCell === 2048) {\n      document.removeEventListener('keydown', kbListener);\n\n      messageWin.classList.remove('hidden');\n    }\n\n    if (!isAvailableMovement) {\n      document.removeEventListener('keydown', kbListener);\n      messageLose.classList.remove('hidden');\n    }\n  };\n\n  // #endregion\n\n  // #region keyboardListener\n\n  const kbListener = (e) => {\n    if (gStatus() === 'playing') {\n      changeButtonStartToRestart();\n    }\n\n    switch (e.key) {\n      case 'ArrowLeft':\n        game.moveLeft();\n        refreshGameField();\n        break;\n      case 'ArrowRight':\n        game.moveRight();\n        refreshGameField();\n        break;\n      case 'ArrowUp':\n        game.moveUp();\n        refreshGameField();\n        break;\n      case 'ArrowDown':\n        game.moveDown();\n        refreshGameField();\n        break;\n      default:\n        break;\n    }\n  };\n\n  // #endregion\n\n  startRestartButton.addEventListener('click', (e) => {\n    e.preventDefault();\n\n    const isResetButton = e.target.classList.contains('restart');\n    const isStartButton = e.target.classList.contains('start');\n\n    if (gStatus() === 'playing' && isResetButton) {\n      resetGame();\n      changeButtonRestartToStart();\n      document.addEventListener('keydown', kbListener);\n    }\n\n    if (gStatus() === 'playing' && isStartButton) {\n      resetGame();\n      refreshGameField();\n    }\n\n    if (gStatus() === 'idle' && isStartButton) {\n      game.start();\n\n      e.currentTarget.blur();\n\n      messageStart.classList.add('hidden');\n\n      refreshGameField();\n      document.addEventListener('keydown', kbListener);\n    }\n  });\n});\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$parcel$global","globalThis","self","window","global","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","$bB0zn","$6QEWP","$2Xzd1","$3d28d7f1aac198f5$var$Game","Game","initialCustomState","_","direction","up","down","left","right","gameStatus","idle","playing","win","lose","initialField","score","cellMax","fieldSize","isAvailableMovement","status","isCustomInitial","defaultState","key","value","sumGameFieldByRow","sumGameFieldByColumn","state","length","generateRandomCellOnField","gameField","_Math","Math","max","apply","flat","random","gameFieldSize","arguments","row","floor","col","size","rtl","isSumm","sum","rightToLeftSum","reduceRight","newRow","i","firstValue","concat","slice","Array","fill","summCollapsed","leftToRightSum","reduce","push","field","newArr","forEach","item","itemIdx","array1","array2","array1Json","JSON","stringify","_this","sumOfCollapsedCells","includes","leftCollapsed","_this_sumRow","sumRow","rightCollapsed","_this_sumRow1","tr","transposeField","upCollapsed","downCollapsed","scoreByField","calculatedGameField","map","rowCollaped","compareGameField","getMaxValueCell","qty","parse","cell","getRandomCellIndex","cellValue","getRandomCellValue","getAvailabilityMovement","$8713978b2328d32b$export$2996f80ef42b8419","instance","Constructor","TypeError","$4fc75ccb937ab1df$var$_defineProperties","target","props","descriptor","writable","$4fc75ccb937ab1df$export$d60067ff2358eee8","protoProps","staticProps","prototype","$227c6742e0ff6f82$export$1b5e630bc3aea29f","$gUOYc","$Q6yVl","$4S8xA","$ihB7G","arr","_array_without_holes","_iterable_to_array","_unsupported_iterable_to_array","_non_iterable_spread","$c50969dc1df61e8b$export$7e0947b5ad3404e2","$gNF1f","isArray","_array_like_to_array","$c3b10a83b523f372$export$79e617b1955a2616","len","arr2","$09c9f293d010c0e1$export$1eb58a6e75231000","iter","Symbol","iterator","from","$38c2d4931cb7a7c4$export$e6f3c4780d19eb2b","$d4f69c5c6c4654b1$export$a5be06335b3a083c","o","minLen","toString","constructor","name","test","document","addEventListener","game","startRestartButton","querySelector","gStatus","getStatus","messageStart","messageWin","messageLose","gameScore","rows","querySelectorAll","gameFieldCells","resetGame","restart","refreshGameField","classList","add","changeButtonStartToRestart","remove","textContent","changeButtonRestartToStart","getState","maxCell","gMaxCell","getMoveAvailability","getScore","k","className","removeEventListener","kbListener","moveLeft","moveRight","moveUp","moveDown","preventDefault","isResetButton","contains","isStartButton","start","currentTarget","blur"],"version":3,"file":"index.0c859cf3.js.map"}